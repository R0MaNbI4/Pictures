Функционал Pictures
+Считать картинку RGB из изображения (в буфере, но в формате RGB)
+Вывести сохраненную картинку (RGB)
Вывести картинку с определенным номером (Index) Нужно обязательно определить размеры и палитру
Привести картинку к другой цветовой палитре
Изменить картинку (Index)

+Считать картинку из файла (RGB)
+Записать картинку в файл (RGB)

readPictureFromImage
writePictureToFile
showPictureFromFile
generateIndex
writeIndex
readIndex
showPictureFromIndex
fromBoolToDec
fromDecToBool
getBit
getBitLength
setIndex
getIndex
addIndex
multipleIndex


Привести картинку к другой цветовой палитре
Тогда размер хранимого файла должен измениться
Если хранить каждый пиксель в RGB, то размер останется тот же
Поэтому нужно хранить индексы цветов?

Количество вариантов: количество_цветов^количество пикселей
Допустим, 4 цвета и картинка 10х10
1606938044258990275541962092341162602522202993782792835301376
201 разряд в двоичной системе
61 разряд в десятичной
Если каждый цвет записать в двоичном виде, то как раз получается максимум 200 разрядов в двоичном виде
Поэтому нужно записывать именно индексы цветов
Или же хранить картинку в двух файлах. В одном в виде RGB, во втором в виде индексов цветов
Или в другой формулировке. в RGB хранится картинка, а индекс - её порядковый номер

Чтобы изменять картинку, будет меняться ее порядковый номер
Существует максимальный порядковый номер в зависимости от размера и цветовой палитры

RGB можно хранить 16-ричном виде
RGB формат используется для
-вывода
-сохранения

4294967296 система счисления
Использовать RGBA картинку как систему счисления, где каждый пиксель представляет собой цифру от 0 до 4294967295
Например, есть картинка 256 цветов 100х100 пикселей (10000 пикселей) (24083 разряда в десятичном виде)
Чтобы закодировать такую картинку в этой системе счисления, понадобится 2500 пикселей (50х50)
Потому что для представления одного 256-битного цвета нужно 8 пикселей, а в этой системе счисления 32 (в 4 раза больше)
Чтобы закодировать 16-битную картинку, нужно в 8 раз меньше пикселей

11111111 11111111 00100000 00010000
11111111 11111111 00100000 00010000

Время работы
Картинка png 226х223 (50398)
Время чтения изображения в буфер 3402 миллисекунды (1 пиксель - 67,5 микросекунд)
Время записи в файл 141 миллисекунда (1 пиксель - 2,798 микросекунды)
Время чтения картинки из файла 3605 миллисекунд (1 пиксель - 71,5 микросекунда)
Всего: 7148 миллисекунд
В итоге 1 пиксель - 141,8 микросекунд

Картинка jpg 512x410 (209920)
Время чтения изображения в буфер 58053 миллисекунды (1 пиксель - 276,55 микросекунд)
Время записи в файл 455 миллисекунд (1 пиксель - 2,167 микросекунды)
Время чтения картинки из файла 61618 миллисекунд (1 пиксель - 293,53 микросекунды)
Всего: 120129 миллисекунд
В итоге 1 пиксель - 572,25 микросекунды

Картинка png 748x502 (375496) (пейзаж не считался)
Всего: миллисекунд
В итоге 1 пиксель - 

Картинка png 826х793 (655018)
Время чтения изображения в буфер 577053 миллисекунды (1 пиксель - 880,97 микросекунд)
Время записи в файл 1351 миллисекунда (1 пиксель - 2,063 микросекунды)
Время чтения картинки из файла 608464 миллисекунды (1 пиксель - 928,927 микросекунд)
Всего: 1186871 миллисекунд
В итоге 1 пиксель - 1811,96 микросекунд

50398/141,8 = 355,42
209920/572,25 = 366,83
655018/1811,96 = 361,49

savePictureIndexToFile
hexNum (length - 1000000) to BigInteger: 21958
boolNum (length - 4000000) to BigInteger: 20444
hexNum (length - 1000000) to BigInteger: 22223
boolNum (length - 4000000) to BigInteger: 20770
hexNum (length - 1000000) to BigInteger: 22181
boolNum (length - 4000000) to BigInteger: 20735
hexNum (length - 1000000) to BigInteger: 22209
boolNum (length - 4000000) to BigInteger: 20839
hexNum (length - 1000000) to BigInteger: 22325
boolNum (length - 4000000) to BigInteger: 20792
hexNum (length - 1000000) to BigInteger: 22238
boolNum (length - 4000000) to BigInteger: 20778
hexNum (length - 1000000) to BigInteger: 22217
boolNum (length - 4000000) to BigInteger: 20751
hexNum (length - 1000000) to BigInteger: 22267
boolNum (length - 4000000) to BigInteger: 20748
hexNum (length - 1000000) to BigInteger: 22161
boolNum (length - 4000000) to BigInteger: 20795
hexNum (length - 1000000) to BigInteger: 22260
boolNum (length - 4000000) to BigInteger: 20707
Среднее время после 10 повторов
hexNum to BigInteger: 22204
boolNum to BigInteger: 20735

256 = 2^8
256*256*256 = 2^24
1024x1024 = 2^20

(2^24^)^20

2 || 2 = 2^2 = 4
2 || 3 = 2^2^2 = 2^4 = 16
2 || 4 = 2^2^2^2 = 2^16 = 65536
2 || 5 = 2^2^2^2^2 = 2^65536 = (2^24)^2730 ~ количество картинок 52х52
2 || 6 = 2^2^2^2^2^2 = (2^24)^
